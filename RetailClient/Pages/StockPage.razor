@page "/stock"
<PageTitle>Stock Page</PageTitle>
<h3>StockPage</h3>

<form>
    <div>
        <label for="newProductName"> New Product Name:</label>
        <input type="text" id="newProductName" class="form-control" @bind="NewProductName" />
    </div>
    <button type="button" class="btn btn-primary" @onclick="SubmitNewProductName">Create</button>
    <div>
        <label for="productName">Select Product:</label>
        <select id="productName" class="form-control" @onchange="HandleProductSelection">
            <option value="">Select a product...</option>
            @foreach (var product in products)
            {
                <option value="@product.Key">@product.Key</option>
            }
        </select>
    </div>
    <div>
        <label for="ProductModification">Amount:</label>
        <input type="number" id="ProductModification" class="form-control" @bind="ProductModification" disabled="@(!productSelected || ProductModificationDisabled)" min="0" step="1" />
        <div>
            <div>
                <input type="radio" id="deposit" name="transactionType" value="deposit" @onchange="e => selectedTransactionType = e.Value.ToString()" disabled="@(!productSelected)" />
                <label for="deposit">Deposit</label>
            </div>
            <div>
                <input type="radio" id="withdrawl" name="transactionType" value="withdrawl" @onchange="e => selectedTransactionType = e.Value.ToString()" disabled="@(!productSelected)" />
                <label for="withdrawl">Withdrawl</label>
            </div>
        </div>
    </div>
    <button type="button" class="btn btn-primary" @onclick="SubmitTransaction" disabled="@(!productSelected || ProductModificationDisabled)"> Submit Transaction</button>
</form>
@foreach (var product in products)
{
    <p>@product.Key : @product.Value</p>
}

@code {
    private Dictionary<string, int> products = new Dictionary<string, int>
    {
        { "Product A", 10 },
        { "Product B", 15 },
        { "Product C", 20 },
        { "Product D", 20 },
        { "Product E", 20 }
    };

    private string selectedProduct;
    private int ProductModification;
    private bool productSelected;
    private bool ProductModificationDisabled;
    private string selectedTransactionType;
    private string NewProductName;

    private void SubmitTransaction()
    {
        if (selectedTransactionType == "deposit")
        {
            products[selectedProduct] += ProductModification;
            Console.WriteLine($"Deposit {ProductModification} to {selectedProduct}");
        }
        else if (selectedTransactionType == "withdrawl")
        {
            if (products[selectedProduct] >= ProductModification)
            {
                products[selectedProduct] -= ProductModification;
                Console.WriteLine($"Withdraw {ProductModification} from {selectedProduct}");
            }
            else
            {
                Console.WriteLine($"Cannot withdraw {ProductModification} from {selectedProduct}. Insufficient stock.");
            }
        }

        ProductModification = 0;
    }

    private void SubmitNewProductName()
    {
        if (!string.IsNullOrEmpty(NewProductName))
        {
            if (!products.ContainsKey(NewProductName))
            {
                products.Add(NewProductName, 0);
                Console.WriteLine($"New product '{NewProductName}' created.");
            }
            else
            {
                Console.WriteLine($"Product '{NewProductName}' already exists.");
            }
        }
        else
        {
            Console.WriteLine("Please enter a product name.");
        }
    }
    private void HandleProductSelection(ChangeEventArgs args)
    {
        selectedProduct = args.Value.ToString();
        productSelected = !string.IsNullOrEmpty(selectedProduct);
    }

}
